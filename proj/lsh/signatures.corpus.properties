## Benjamin Van Durme, vandurme@cs.jhu.edu, 22 Nov 2011

## To build signatures, a basic recipe:
##
## 1. create a key file, e.g., keys.txt, containing the phrases you are
## interested in, one phrase per line
##
## 2. point StaticLineStream.files to the ngram files you will process
##
## 3. run it, for example:
##    jerboa/scripts/process.sh signatures.corpus.properties -Xmx10g \
##    -cp jerboa/target/jerboa-1.0.0.jar \
##    -DSLSH.keysFilter=keys.txt -DSLSH.prefixOut=results

## To use a different kind of context, you need to write a different builder
ProcessStream.processor = edu.jhu.jerboa.sim.CorpusNGramSigBuilder
## Unlikely you'll change this
ProcessStream.container = edu.jhu.jerboa.sim.SLSH
## How is the underlying data to be read in? This stream type represents a
## static set of files, that are being read in line by line.
ProcessStream.streamType = edu.jhu.jerboa.processing.StaticLineStream

## Where is the data?
StaticLineStream.files = ..../gigaword/parsed/nyt.*gz

## What should parse each line, to turn it into a Hastable<String,Object> blob
## that is expected of any Jerboa stream processor?
StaticLineStream.lineParser = edu.jhu.jerboa.processing.PTBLineParser

PTBLineParser.content = true
PTBLineParser.posTags = false

## Why wouldn't this always be true? It could be that we want to extract just
## the sums, if we are processing a very large amount of data in parallel, where
## a downstream operation is then responsible for merging those partial sums
## across many files, into a single set of sums, which are then converted to bit
## signatures.
CorpusNGramSigBuilder.makeSigs = true

## Need to set this to a list of phrases to build signatures for
#CorpusNGramSigBuilder.keys = 

## See CorpusNGramSigBuilder for details
CorpusNGramSigBuilder.window = 6
CorpusNGramSigBuilder.useWeight = false
CorpusNGramSigBuilder.useDirection = true
CorpusNGramSigBuilder.usePosition = true
CorpusNGramSigBuilder.lowercase = true
#CorpusNGramSigBuilder.projDict =

## This could be anything, but if set to 0 then it will pick something at random
## (good for experimenting with the underlying algorithm, but otherwise don't
## set to 0)
SLSH.seed = 42

## This is a fair amount of bits. I set it high because in theory we could later
## just read in a subset of the bits to memory, if we care.
#SLSH.numBits = 512
SLSH.numBits = 256

## While the following are provided here explicitly, they are given as reference.
## It is assumed that one will simply specify SLSH.prefixIn and/or
## SLSH.prefixOut, and the rest will be handled as defeaults.

## best defined via command line
## SLSH.prefixIn =
## SLSH.prefixOut =

## In the simple way of using this, you'll just need to specify SLSH.keysIn, and
## SLSH.prefixOut

## NOTE: the following *In properties can be String[], where they should each
## expand to a list of the same length, with the exception of config, where we
## will only look at the first file (as all sigs should have the same config).
##
SLSH.configIn = {SLSH.prefixIn}.config
SLSH.keysIn = {SLSH.prefixIn}.keys.gz
SLSH.readSums = true
SLSH.sumsIn = {SLSH.prefixIn}.sums
SLSH.readBytes = false
SLSH.bytesIn = {SLSH.prefixIn}.bytes
SLSH.readStrengths = true
SLSH.strengthsIn = {SLSH.prefixIn}.strengths

SLSH.configOut = {SLSH.prefixOut}.config
SLSH.writeConfig = true
SLSH.keysOut = {SLSH.prefixOut}.keys.gz
SLSH.writeSums = false
SLSH.sumsOut = {SLSH.prefixOut}.sums
SLSH.writeBytes = true
SLSH.bytesOut = {SLSH.prefixOut}.bytes
SLSH.writeStrengths = true
SLSH.strengthsOut = {SLSH.prefixOut}.strengths
